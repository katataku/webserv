HTTP/1.1 200 OK
Server: nginx/1.14.2
Date: Mon, 04 Jul 2022 07:25:53 GMT
Content-Type: text/html
Transfer-Encoding: chunked
Connection: keep-alive

<!DOCTYPE html>

<html lang="ja">

<head>
  <meta charset="UTF-8">
  <meta name="description" content="file upload">
  <meta name="keywords" content="upload">
  <title>File upload</title>
</head>

<body>
FieldStorage(None, None, [FieldStorage('upload_file', 'Makefile', b'NAME = webserv\nCXX = c++\nCXXFLAGS = -Wall -Wextra -Werror -std=c++98 -pedantic -MMD -MP\nSRCS = srcs/**/webserv.cpp\nOBJS = $(SRCS:%.cpp=%.o)\nDEPS = $(OBJS:%.o=%.d)\nINCS = -Isrcs/**/**.hpp\n\n# -------------------------- Rules For Build ------------------------------\n\n$(NAME): $(OBJS) ## Build webserver\n\t$(CXX) $(CXXFLAGS) -o $(NAME) $(OBJS)\n\n%.o: %.cpp\n\t$(CXX) $(CXXFLAGS) $(INCS) -o $@ -c $<\n\nall: $(NAME) ## Build webserver\n\nfclean: clean ## Delete executable webserver\n\t$(RM) $(NAME)\n\nclean: ## Delete webserver object files\n\t$(RM) $(OBJS) $(DEPS)\n\nre: fclean all ## Rebuild webserver\n\n.PHONY: all fclean clean re\n\n-include $(DEPS)\n\n# -------------------------- Rules For Test -------------------------------\n\n.PHONY: test\ntest: utest itest ## Exec all tests for webserver\n\n.PHONY: utest\nutest: ## Exec unit tests for webserver\n\tmake -C tests/unit_test\n\nINTEGRATION_TEST_SHELL = ./tests/integration_test/integration_test.sh\n.PHONY: itest\nitest: ## Exec unit tests for webserver\n\t@if [ ! -x $(INTEGRATION_TEST_SHELL) ]; then\\\n\t\tchmod +x $(INTEGRATION_TEST_SHELL);\\\n\tfi\n\t$(INTEGRATION_TEST_SHELL)\n\n# -------------------- Rules For Static Analyser --------------------------\n\n.PHONY: lint\nlint: ## Lint webserver source files\n\tcpplint --filter=-legal/copyright srcs/**/*.hpp srcs/**/*.cpp\n\n.PHONY: tidy\ntidy: ## Tidy webserver source files\n\tclang-tidy srcs/**/*.hpp srcs/**/*.cpp -fix\n\n# ------------------------ Rules For Developer ----------------------------\n\n.PHONY: setup\nsetup: ## Set up hooks for commit\n\tcp ./.githooks/pre-commit ./.git/hooks/pre-commit\n\tchmod +x ./.git/hooks/pre-commit\n\n# ------------------------- Rules For Docker ------------------------------\n\nCONTAINER = webserv\nDOCKER_COMPOSE_FILE = ./docker/$(CONTAINER)/docker-compose.yml\n\n.PHONY: dc-build\ndc-build: ## Build docker container\n\tdocker compose -f $(DOCKER_COMPOSE_FILE) build \n\n.PHONY: dc-up\ndc-up: ## Run docker container\n\tdocker compose -f $(DOCKER_COMPOSE_FILE) up -d\n\n.PHONY: dc-login\ndc-login: ## Login docker container\n\tdocker exec -it $(CONTAINER) /bin/bash\n\n.PHONY: dc-down\ndc-down: ## Down docker container\n\tdocker compose -f $(DOCKER_COMPOSE_FILE) down --timeout 1\n\n.PHONY: dc-re\ndc-re: dc-down dc-build dc-up ## Rebuild docker image and run container\n\t\n\n# ----------------------- Rules For Nginx Container -----------------------\n\n.PHONY: dc-nginx-build\ndc-nginx-build: ## Build nginx container\n\tmake dc-build CONTAINER=nginx\n\n.PHONY: dc-nginx-up\ndc-nginx-up: ## Run nginx container\n\tmake dc-up CONTAINER=nginx\n\n.PHONY: dc-nginx-login\ndc-nginx-login: ## Login nginx container\n\tmake dc-login CONTAINER=nginx\n\n.PHONY: dc-nginx-down\ndc-nginx-down: ## Down nginx container\n\tmake dc-down CONTAINER=nginx\n\n.PHONY: dc-nginx-re \ndc-nginx-re: dc-nginx-down dc-nginx-build dc-nginx-up ## Rebuild nginx image and run container\n\n.PHONY: dc-prune\ndc-prune: ## Delete unused docker object (images, containers, networks)\n\tdocker system  prune\n\n# ---------------------------- Rules For Help -----------------------------\n\n.PHONY: help\nhelp: ## Display this help screen\n\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' Makefile | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n\n.PHONY: h\nh: help ## shorthand \'help\' command\n')])
<p>file upload success</p>
 <p>you can see uploaded files <a href='/files/'>here</a></p>
</body>

</html>
